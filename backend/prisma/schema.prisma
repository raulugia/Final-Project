// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String
  surname String
  meals MealLog[]
  friends Friendship[] @relation("UserFriends")
  friendOf Friendship[] @relation("FriendFriends")
  chatsSent Message[] @relation("SentMessages")
  chatsReceived Message[] @relation("ReceivedMessages")
}

model Restaurant {
  id Int @id @default(autoincrement())
  name String
  meals Meal[] @relation("RestaurantMeals")
}

model Meal {
  id Int @id @default(autoincrement())
  name String
  restaurant Restaurant @relation("RestaurantMeals" ,fields: [restaurantId], references: [id])
  restaurantId Int
  logs MealLog[]
}

model MealLog {
  id Int @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id])
  userId Int
  meal Meal @relation(fields:[mealId], references: [id])
  mealId Int
  picture String
  thumbnail String
  carbEstimate Int
  description String?
  rating Rating
  createdAt DateTime @default(now())
}

enum Rating {
  ACCURATE
  INACCURATE
  SLIGHTLY_INACCURATE
}

model Friendship {
  id Int @id @default(autoincrement())
  user User @relation("UserFriends", fields: [userId], references: [id])
  userId Int
  friend User @relation("FriendFriends", fields: [friendId], references: [id])
  friendId Int

  @@unique([userId, friendId])
}

model Message {
  id Int @id @default(autoincrement())
  sender User @relation("SentMessages", fields: [senderId], references: [id])
  senderId Int
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  content String
  timestamp DateTime @default(now())
}