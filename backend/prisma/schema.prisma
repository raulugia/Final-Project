// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//All the code in this file was written without assistance 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  uid String @unique 
  email String @unique @db.VarChar(255)
  username String @unique @db.VarChar(25)
  name String @db.VarChar(100)
  surname String @db.VarChar(100)
  profilePicUrl String?
  profileThumbnailUrl String?
  imgStatus ImgStatus? @default(COMPLETED)
  meals MealLog[]
  friends Friendship[] @relation("UserFriends") //friendships initiated by the user
  friendOf Friendship[] @relation("FriendFriends")
  chatsSent Message[] @relation("SentMessages")
  chatsReceived Message[] @relation("ReceivedMessages")
  sentRequests FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}

enum ImgStatus {
  PROCESSING
  FAILED
  COMPLETED
}

model Restaurant {
  id Int @id @default(autoincrement())
  name String @unique
  meals Meal[] @relation("RestaurantMeals")
}

model Meal {
  id Int @id @default(autoincrement())
  name String
  restaurant Restaurant @relation("RestaurantMeals" ,fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  logs MealLog[]
  @@unique([name, restaurantId]) //ensure the same meal name can only be logged once per restaurant
}

model MealLog {
  id Int @id @default(autoincrement())
  user User @relation(fields:[userUid], references: [uid], onDelete: Cascade)
  userUid String
  meal Meal @relation(fields:[mealId], references: [id])
  mealId Int
  picture String
  thumbnail String
  imgStatus ImgStatus @default(COMPLETED)
  carbEstimate Int
  description String?
  rating Rating
  createdAt DateTime @default(now())
}

enum Rating {
  ACCURATE
  INACCURATE
  SLIGHTLY_INACCURATE
  PENDING
}

model Friendship {
  id Int @id @default(autoincrement())
  user User @relation("UserFriends", fields: [userUid], references: [uid], onDelete: Cascade)
  userUid String
  friend User @relation("FriendFriends", fields: [friendUid], references: [uid], onDelete: Cascade)
  friendUid String

  @@unique([userUid, friendUid])
}

model FriendRequest {
  id Int @id @default(autoincrement())
  sender User @relation("SentRequests", fields: [senderUid], references: [uid], onDelete: Cascade)
  senderUid String
  receiver User @relation("ReceivedRequests", fields: [receiverUid], references: [uid], onDelete: Cascade)
  receiverUid String
  status RequestStatus
  createdAt DateTime @default(now())
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Message {
  id Int @id @default(autoincrement())
  sender User @relation("SentMessages", fields: [senderUid], references: [uid], onDelete: Cascade)
  senderUid String
  receiver User @relation("ReceivedMessages", fields: [receiverUid], references: [uid], onDelete: Cascade)
  receiverUid String
  content String
  timestamp DateTime @default(now())
}